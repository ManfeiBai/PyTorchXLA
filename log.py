"""
F0513 22:59:03.705964  146399 debug_macros.h:20] Non-OK-status: status.status() status: 
INVALID_ARGUMENT: The parameter of condition and body, the result of the body, and init must all 
have the same shape; got 

Condition: 
  (p0: s64[]) 
  -> 
  pred[]; 
  
body: (
    in: 
    (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
    f32[20,10,5,5], f32[20], f32[20], f32[20], 
    f32[50,500], f32[50], f32[10,50], f32[10], f32[20], f32[20], f32[10], f32[10], 
    f32[16,1,28,28], f32[16,1,28,28])) 
    -> 
    (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
    f32[20,10,5,5], f32[20], f32[20], f32[20], 
    f32[50,500], f32[50], f32[10,50], f32[10], f32[16,10]); 
    
init: 
    (s64[], 
    f32[10,1,5,5], f32[10], f32[10], f32[10], 
    f32[20,10,5,5], f32[20], f32[20], f32[20], f32[50,500], f32[50], f32[10,50], f32[10], 
    f32[16,1,28,28]) 

"""

"""
Condition: 
  (p0: s64[]) 
  -> 
  pred[]; 
  
body: (
  in: 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], f32[20], f32[20], f32[10], f32[10], 
  f32[16,1,28,28], f32[16,1,28,28])) 
  -> 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], 
  f32[16,10]);

init: 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], f32[16,1,28,28])..: 

"""

"""
Condition: 
  (p0: s64[]) 
  -> 
  pred[]; 
  
body: (
  in: 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], f32[20], f32[20], f32[10], f32[10], 
  f32[16,1,28,28], f32[16,1,28,28])) 
  -> 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], 
  f32[16,10]); 

init: 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], f32[16,1,28,28])..: 
"""

"""
Condition: 
  (p0: s64[]) 
  -> 
  pred[]; 
  
body: (
    in: 
    (s64[], f32[20], f32[20], f32[10], f32[10], f32[10], f32[10,50], f32[50], 
    f32[50,500], f32[20], f32[20], f32[20], 
    f32[20,10,5,5], f32[10], f32[10], f32[10], f32[10,1,5,5], 
    f32[16,1,28,28], f32[16,1,28,28])) 
    -> 
    (s64[], f32[20], f32[20], f32[10], f32[10], f32[16,10]); 

init: 
    (s64[], f32[20], f32[20], f32[10], f32[10], f32[16,1,28,28])..:
"""

"""
F0513 23:17:12.083299  174155 debug_macros.h:20] Non-OK-status: 
status.status() status: INVALID_ARGUMENT: The parameter of condition and body, 
the result of the body, and init must all have the same shape; got 

Condition: 
  (p0: s64[]) 
  -> 
  pred[]; 
  
body: (
    in: 
    (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
    f32[20,10,5,5], f32[20], f32[20], f32[20], 
    f32[50,500], f32[50], f32[10,50], f32[10], f32[20], f32[20], f32[10], f32[10], 
    f32[16,1,28,28], f32[16,1,28,28])) 
    -> 
    (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
    f32[20,10,5,5], f32[20], f32[20], f32[20], 
    f32[50,500], f32[50], f32[10,50], f32[10], 
    f32[16,10]); 
    
init: 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], 
  f32[16,1,28,28])..: 

"""

"""
Condition: 
  (p0: s64[]) 
  -> 
  pred[]; 

body: (
    in: 
    (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
    f32[20,10,5,5], f32[20], f32[20], f32[20], 
    f32[50,500], f32[50], f32[10,50], f32[10], f32[20], f32[20], f32[10], f32[10], 
    f32[16,1,28,28], f32[16,1,28,28])) 
    -> 
    (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
    f32[20,10,5,5], f32[20], f32[20], f32[20], 
    f32[50,500], f32[50], f32[10,50], f32[10], 
    f32[16,10]); 

init: 
  (s64[], f32[10,1,5,5], f32[10], f32[10], f32[10], 
  f32[20,10,5,5], f32[20], f32[20], f32[20], 
  f32[50,500], f32[50], f32[10,50], f32[10], 
  f32[16,1,28,28])..:
"""

carried_inputs:  (
    tensor(3, device='xla:0'), 
    tensor(?, device='xla:0'))
additional_inputs:  []
fake_carried_inputs:  [
    tensor(0, device='xla:0'), 
    tensor(?, device='xla:0')]

