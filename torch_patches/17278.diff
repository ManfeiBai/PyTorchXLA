diff --git a/aten/src/ATen/core/Type.h b/aten/src/ATen/core/Type.h
index 1b300f10d28..ffba28b58ae 100644
--- a/aten/src/ATen/core/Type.h
+++ b/aten/src/ATen/core/Type.h
@@ -78,8 +78,24 @@ enum class TypeID {
   SparseCUDAInt,
   SparseCUDALong,
   SparseCUDAShort,
-  MSNPU,
-  XLA,
+  MSNPUBool,
+  MSNPUByte,
+  MSNPUChar,
+  MSNPUDouble,
+  MSNPUFloat,
+  MSNPUInt,
+  MSNPULong,
+  MSNPUShort,
+  MSNPUHalf,
+  XLABool,
+  XLAByte,
+  XLAChar,
+  XLADouble,
+  XLAFloat,
+  XLAInt,
+  XLALong,
+  XLAShort,
+  XLAHalf,
   CPUComplexFloat,
   CPUComplexDouble,
   CUDAComplexFloat,
diff --git a/aten/src/ATen/gen.py b/aten/src/ATen/gen.py
index e1530413868..0bcde20059e 100644
--- a/aten/src/ATen/gen.py
+++ b/aten/src/ATen/gen.py
@@ -121,8 +121,10 @@ def check_all_files_written(self):
 TYPE_EXTENDED_INTERFACE_H = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeExtendedInterface.h")
 TYPE_DEFAULT_H = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeDefault.h")
 TYPE_DEFAULT_CPP = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeDefault.cpp")
-TYPE_EXTENSION_BACKEND_H = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeExtension.h")
-TYPE_EXTENSION_BACKEND_CPP = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeExtension.cpp")
+TYPE_EXTENSION_H = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeExtension.h")
+TYPE_EXTENSION_CPP = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeExtension.cpp")
+TYPE_EXTENSION_DERIVED_H = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeExtensionDerived.h")
+TYPE_EXTENSION_DERIVED_CPP = CodeTemplate.from_file(TEMPLATE_PATH + "/TypeExtensionDerived.cpp")
 
 LEGACY_TH_DISPATCHER_H = CodeTemplate.from_file(TEMPLATE_PATH + "/LegacyTHDispatcher.h")
 LEGACY_TH_DISPATCHER_CPP = CodeTemplate.from_file(TEMPLATE_PATH + "/LegacyTHDispatcher.cpp")
@@ -358,38 +360,43 @@ def generate_storage_type_and_tensor(backend, density, scalar_type, declarations
         top_env['cuda_type_headers'].append(
             '#include "ATen/{}.h"'.format(env['Type']))
 
-    return env
-
 
 def generate_type_extension_backend(backend, declarations):
     env = {}
     env['Type'] = "{}Type".format(backend)
     env['Backend'] = backend
     env['DeviceType'] = backend
-    env['is_extension_backend'] = True
-    env['TypeID'] = 'TypeID::' + backend
-    top_env['type_ids'].append(backend + ',')
 
     declarations, definitions = function_wrapper.create_extension_backend(
         env, declarations)
     env['type_method_declarations'] = declarations
     env['type_method_definitions'] = definitions
 
-    fm = file_manager
-    fm.write(env['Type'] + ".cpp", TYPE_EXTENSION_BACKEND_CPP, env)
-    fm.write(env['Type'] + ".h", TYPE_EXTENSION_BACKEND_H, env)
+    file_manager.write(env['Type'] + ".cpp", TYPE_EXTENSION_CPP, env)
+    file_manager.write(env['Type'] + ".h", TYPE_EXTENSION_H, env)
 
-    for scalar_name, _, _, _, _ in scalar_types:
-        type_register = TYPE_REGISTER.substitute(backend=env['Backend'], scalar_type=scalar_name, type_name=env['Type'])
-        top_env['cpu_type_registrations'].append(type_register)
     extension_backend_register_switch = EXTENSION_BACKEND_REGISTER_SWITCH.substitute(env)
     top_env['extension_backend_register_switches'].append(extension_backend_register_switch)
     top_env['extension_backend_headers'].append(
         '#include <ATen/{}.h>'.format(env['Type']))
-    top_env['cpu_type_headers'].append(
-        '#include "ATen/{}.h"'.format(env['Type']))
 
-    return env
+
+def generate_type_extension_backend_derived_types(backend):
+    env = {}
+    env['Backend'] = backend
+    for scalar_name, c_type, _, _, _ in scalar_types:
+        env['Type'] = "{}{}Type".format(backend, scalar_name)
+        env['ScalarName'] = scalar_name
+        env['ScalarType'] = c_type
+        env['TypeID'] = 'TypeID::' + backend + scalar_name
+        top_env['type_ids'].append(backend + scalar_name + ',')
+
+        type_register = TYPE_REGISTER.substitute(backend=env['Backend'], scalar_type=scalar_name, type_name=env['Type'])
+        top_env['cpu_type_registrations'].append(type_register)
+        file_manager.write(env['Type'] + ".cpp", TYPE_EXTENSION_DERIVED_CPP, env)
+        file_manager.write(env['Type'] + ".h", TYPE_EXTENSION_DERIVED_H, env)
+
+        top_env['cpu_type_headers'].append('#include "ATen/{}.h"'.format(env['Type']))
 
 
 def generate_legacy_th_dispatcher(backend, density, scalar_type, declarations):
@@ -440,8 +447,8 @@ def declare_outputs():
         if generators[fname]['name'] == 'CUDA':
             fm = cuda_file_manager
         fm.will_write(fname)
-    for backend, density, scalar_types in iterate_types():
-        scalar_name = scalar_types[0]
+    for backend, density, scalar_type in iterate_types():
+        scalar_name = scalar_type[0]
         full_backend = "Sparse" + backend if density == "Sparse" else backend
         fm = file_manager
         if backend == 'CUDA':
@@ -459,6 +466,10 @@ def declare_outputs():
     for backend in extension_backends:
         file_manager.will_write("{}Type.h".format(backend))
         file_manager.will_write("{}Type.cpp".format(backend))
+        for scalar_type in scalar_types:
+            scalar_name = scalar_type[0]
+            file_manager.will_write("{}{}Type.h".format(backend, scalar_name))
+            file_manager.will_write("{}{}Type.cpp".format(backend, scalar_name))
 
 
 def filter_by_extension(files, *extensions):
@@ -514,20 +525,15 @@ def generate_outputs():
     output_declarations = postprocess_output_declarations(output_declarations)
     file_manager.write("Declarations.yaml", format_yaml(output_declarations))
 
-    # populated by generate_storage_type_and_tensor
-    all_types = []
-
     for backend, density, scalar_type in iterate_types():
-        all_types.append(generate_storage_type_and_tensor(
-            backend, density, scalar_type, declarations))
+        generate_storage_type_and_tensor(backend, density, scalar_type, declarations)
     for backend in extension_backends:
-        all_types.append(generate_type_extension_backend(backend, declarations))
+        generate_type_extension_backend(backend, declarations)
+        generate_type_extension_backend_derived_types(backend)
 
-    all_legacy_th_dispatchers = []
     for backend, density, scalar_type in iterate_types():
         if density != 'Sparse':
-            all_legacy_th_dispatchers.append(generate_legacy_th_dispatcher(
-                backend, density, scalar_type, []))
+            generate_legacy_th_dispatcher(backend, density, scalar_type, [])
 
     core_files = {
         'Type.h': TYPE_H,
diff --git a/aten/src/ATen/templates/TypeExtension.cpp b/aten/src/ATen/templates/TypeExtension.cpp
index 313b865fc02..a50fb2f1cb0 100644
--- a/aten/src/ATen/templates/TypeExtension.cpp
+++ b/aten/src/ATen/templates/TypeExtension.cpp
@@ -22,26 +22,10 @@ std::unique_ptr<Generator> ${Type}::generator() const {
   AT_ERROR("generator is not implemented for ${Type}");
 }
 
-ScalarType ${Type}::scalarType() const {
-  AT_ERROR("scalarType is not implemented for ${Type}");
-}
-
-caffe2::TypeMeta ${Type}::typeMeta() const {
-  AT_ERROR("typeMeta is not implemented for ${Type}");
-}
-
 Backend ${Type}::backend() const {
   return Backend::${Backend};
 }
 
-const char * ${Type}::toString() const {
-  return "${Type}";
-}
-
-TypeID ${Type}::ID() const {
-  return ${TypeID};
-}
-
 size_t ${Type}::elementSizeInBytes() const {
   AT_ERROR("elementSizeInBytes is not implemented for ${Type}");
 }
diff --git a/aten/src/ATen/templates/TypeExtension.h b/aten/src/ATen/templates/TypeExtension.h
index fe459602254..a622efbdc03 100644
--- a/aten/src/ATen/templates/TypeExtension.h
+++ b/aten/src/ATen/templates/TypeExtension.h
@@ -35,13 +35,8 @@ struct CAFFE2_API ${Type} : public TypeDefault {
   Allocator* allocator() const override;
   Device getDeviceFromPtr(void * data) const override;
   std::unique_ptr<Generator> generator() const override;
-
-  virtual ScalarType scalarType() const override;
-  virtual caffe2::TypeMeta typeMeta() const override;
   virtual Backend backend() const override;
-  virtual const char * toString() const override;
   virtual size_t elementSizeInBytes() const override;
-  virtual TypeID ID() const override;
 
   ${type_method_declarations}
 };
diff --git a/aten/src/ATen/templates/TypeExtensionDerived.cpp b/aten/src/ATen/templates/TypeExtensionDerived.cpp
new file mode 100644
index 00000000000..576ba0be9e5
--- /dev/null
+++ b/aten/src/ATen/templates/TypeExtensionDerived.cpp
@@ -0,0 +1,23 @@
+#include <ATen/${Type}.h>
+
+namespace at {
+
+${Type}::${Type}() : ${Backend}Type() {}
+
+ScalarType ${Type}::scalarType() const {
+  return ScalarType::${ScalarName};
+}
+
+caffe2::TypeMeta ${Type}::typeMeta() const {
+    return caffe2::TypeMeta::Make<${ScalarType}>();
+}
+
+const char * ${Type}::toString() const {
+  return "${Type}";
+}
+
+TypeID ${Type}::ID() const {
+  return ${TypeID};
+}
+
+} // namespace at
diff --git a/aten/src/ATen/templates/TypeExtensionDerived.h b/aten/src/ATen/templates/TypeExtensionDerived.h
new file mode 100644
index 00000000000..71ee2615752
--- /dev/null
+++ b/aten/src/ATen/templates/TypeExtensionDerived.h
@@ -0,0 +1,15 @@
+#pragma once
+#include <ATen/${Backend}Type.h>
+
+namespace at {
+
+struct CAFFE2_API ${Type} : public ${Backend}Type {
+  explicit ${Type}();
+
+  virtual ScalarType scalarType() const override;
+  virtual caffe2::TypeMeta typeMeta() const override;
+  virtual const char * toString() const override;
+  virtual TypeID ID() const override;
+};
+
+} // namespace at
